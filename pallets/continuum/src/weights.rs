// This file is part of Metaverse.Network & Bit.Country.

// Copyright (C) 2020-2022 Metaverse.Network & Bit.Country .
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for continuum
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-15, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// continuum
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --template=./template/weight-template.hbs
// --output
// ./pallets/continuum/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for continuum.
pub trait WeightInfo {	fn set_allow_buy_now() -> Weight;	fn set_max_bounds() -> Weight;	fn issue_map_slot() -> Weight;	fn create_new_auction() -> Weight;	fn buy_map_spot() -> Weight;	fn bid_map_spot() -> Weight;}

/// Weights for continuum using the for collator node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	// Storage: Continuum AllowBuyNow (r:0 w:1)
	// Proof Skipped: Continuum AllowBuyNow (max_values: Some(1), max_size: None, mode: Measured)
	fn set_allow_buy_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `646`
		//  Estimated: `646`
		// Minimum execution time: 5_488 nanoseconds.
		Weight::from_parts(6_650_000, 646)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Continuum MaxBound (r:0 w:1)
	// Proof Skipped: Continuum MaxBound (max_values: Some(1), max_size: None, mode: Measured)
	fn set_max_bounds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919`
		//  Estimated: `919`
		// Minimum execution time: 23_954 nanoseconds.
		Weight::from_parts(25_462_000, 919)
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Continuum MapSpots (r:1 w:1)
	// Proof Skipped: Continuum MapSpots (max_values: None, max_size: None, mode: Measured)
	// Storage: Continuum MaxBound (r:1 w:0)
	// Proof Skipped: Continuum MaxBound (max_values: Some(1), max_size: None, mode: Measured)
	fn issue_map_slot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1059`
		//  Estimated: `5088`
		// Minimum execution time: 23_799 nanoseconds.
		Weight::from_parts(24_533_000, 5088)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Continuum MapSpots (r:1 w:0)
	// Proof Skipped: Continuum MapSpots (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction ItemsInAuction (r:1 w:1)
	// Proof Skipped: Auction ItemsInAuction (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction AuctionEndTime (r:1 w:1)
	// Proof Skipped: Auction AuctionEndTime (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction AuctionsIndex (r:1 w:1)
	// Proof Skipped: Auction AuctionsIndex (max_values: Some(1), max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Auction AuctionItems (r:0 w:1)
	// Proof Skipped: Auction AuctionItems (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction Auctions (r:0 w:1)
	// Proof Skipped: Auction Auctions (max_values: None, max_size: None, mode: Measured)
	fn create_new_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1617`
		//  Estimated: `20225`
		// Minimum execution time: 75_559 nanoseconds.
		Weight::from_parts(85_653_000, 20225)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Metaverse MetaverseOwner (r:1 w:0)
	// Proof Skipped: Metaverse MetaverseOwner (max_values: None, max_size: None, mode: Measured)
	// Storage: Continuum MetaverseMap (r:1 w:1)
	// Proof Skipped: Continuum MetaverseMap (max_values: None, max_size: None, mode: Measured)
	// Storage: Metaverse Metaverses (r:1 w:0)
	// Proof Skipped: Metaverse Metaverses (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Classes (r:2 w:0)
	// Proof Skipped: OrmlNFT Classes (max_values: None, max_size: None, mode: Measured)
	// Storage: Continuum MetaverseLeadingBid (r:1 w:0)
	// Proof Skipped: Continuum MetaverseLeadingBid (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction AuctionItems (r:1 w:1)
	// Proof Skipped: Auction AuctionItems (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction Auctions (r:1 w:1)
	// Proof Skipped: Auction Auctions (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: Continuum MapSpots (r:1 w:1)
	// Proof Skipped: Continuum MapSpots (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction ItemsInAuction (r:0 w:1)
	// Proof Skipped: Auction ItemsInAuction (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction AuctionEndTime (r:0 w:1)
	// Proof Skipped: Auction AuctionEndTime (max_values: None, max_size: None, mode: Measured)
	fn buy_map_spot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3168`
		//  Estimated: `59161`
		// Minimum execution time: 146_930 nanoseconds.
		Weight::from_parts(170_947_000, 59161)
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Metaverse MetaverseOwner (r:1 w:0)
	// Proof Skipped: Metaverse MetaverseOwner (max_values: None, max_size: None, mode: Measured)
	// Storage: Continuum MetaverseMap (r:1 w:0)
	// Proof Skipped: Continuum MetaverseMap (max_values: None, max_size: None, mode: Measured)
	// Storage: Metaverse Metaverses (r:1 w:0)
	// Proof Skipped: Metaverse Metaverses (max_values: None, max_size: None, mode: Measured)
	// Storage: OrmlNFT Classes (r:2 w:0)
	// Proof Skipped: OrmlNFT Classes (max_values: None, max_size: None, mode: Measured)
	// Storage: Continuum MetaverseLeadingBid (r:1 w:1)
	// Proof Skipped: Continuum MetaverseLeadingBid (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction AuctionItems (r:1 w:1)
	// Proof Skipped: Auction AuctionItems (max_values: None, max_size: None, mode: Measured)
	// Storage: Auction Auctions (r:1 w:1)
	// Proof Skipped: Auction Auctions (max_values: None, max_size: None, mode: Measured)
	// Storage: System Account (r:1 w:1)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn bid_map_spot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3145`
		//  Estimated: `44418`
		// Minimum execution time: 113_888 nanoseconds.
		Weight::from_parts(120_875_000, 44418)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {	fn set_allow_buy_now() -> Weight {
		Weight::from_parts(6_650_000, 646)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn set_max_bounds() -> Weight {
		Weight::from_parts(25_462_000, 919)
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn issue_map_slot() -> Weight {
		Weight::from_parts(24_533_000, 5088)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	fn create_new_auction() -> Weight {
		Weight::from_parts(85_653_000, 20225)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	fn buy_map_spot() -> Weight {
		Weight::from_parts(170_947_000, 59161)
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	fn bid_map_spot() -> Weight {
		Weight::from_parts(120_875_000, 44418)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}
