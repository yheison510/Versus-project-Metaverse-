// This file is part of Metaverse.Network & Bit.Country.

// Copyright (C) 2020-2022 Metaverse.Network & Bit.Country .
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for evm_mapping
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-13, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/metaverse-node
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// evm-mapping
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --template=./template/weight-template.hbs
// --output
// ./pallets/evm-mapping/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for evm_mapping.
pub trait WeightInfo {	fn claim_eth_account() -> Weight;	fn claim_default_account() -> Weight;}

/// Weights for evm_mapping using the for collator node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {	// Storage: EvmMapping EvmAddresses (r:1 w:1)
	// Proof: EvmMapping EvmAddresses (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	// Storage: EvmMapping Accounts (r:1 w:1)
	// Proof: EvmMapping Accounts (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	// Storage: System Account (r:3 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_eth_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `344`
		//  Estimated: `12879`
		// Minimum execution time: 52_107 nanoseconds.
		Weight::from_parts(53_285_000, 12879)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: EvmMapping EvmAddresses (r:1 w:1)
	// Proof: EvmMapping EvmAddresses (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	// Storage: System Account (r:2 w:2)
	// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	// Storage: EvmMapping Accounts (r:0 w:1)
	// Proof: EvmMapping Accounts (max_values: None, max_size: Some(60), added: 2535, mode: MaxEncodedLen)
	fn claim_default_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `344`
		//  Estimated: `7741`
		// Minimum execution time: 23_927 nanoseconds.
		Weight::from_parts(24_582_000, 7741)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {	fn claim_eth_account() -> Weight {
		Weight::from_parts(53_285_000, 12879)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	fn claim_default_account() -> Weight {
		Weight::from_parts(24_582_000, 7741)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
}
